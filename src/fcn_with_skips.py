# -*- coding: utf-8 -*-
"""fcn_with_skips.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MDTCPY3t14vaBzzOlc9AYeLN_OVMqYii
"""

# from google.colab import drive
# drive.mount('/content/drive')

# !unzip '/content/drive/MyDrive/camvid.zip'

# !unzip camvid.zip

# !unzip camvid.zip

# import os

# from google.colab import drive
# drive.mount('/content/drive')

# !unzip '/content/drive/MyDrive/camvid.zip' '/content/data/'

# %cd "/content/drive/MyDrive/cs-2831-project/"

# #%cd "/content/drive/MyDrive/cs-2831-project/"

# #for root, dirs, files in os.walk('/content/drive/Shareddrives/'):
#     #print("Root:", root)
#     #print("Directories:", dirs)
#     #print("Files:", files)
#     #break  # To avoid listing everything



import torch
import torch.nn as nn
from torchvision import transforms
from dataset import CAMVID_CLASSES

# # ### NOT USED CURRENTLY
# class FCNAlexNet(nn.Module):
#     """FCN alexnet implementation. Should be the main body of the architecture."""
#     def __init__(self, out_channels, in_channels):
#         super().__init__()
#         #print("????")
#         print(in_channels)
#         print(out_channels)
#         self.double_conv = nn.Sequential(
#             nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=2, dilation=2),
#             nn.BatchNorm2d(out_channels),
#             nn.ReLU(inplace=True),
#             nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=2, dilation=2),
#             nn.BatchNorm2d(out_channels),
#             nn.ReLU(inplace=True)
#             # 2 sets with maxpool/LRN
#             # nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1),
#             # nn.BatchNorm2d(out_channels),
#             # nn.ReLU(inplace=True),
#             # nn.MaxPool2d(kernel_size=3),
#             # nn.LocalResponseNorm(size=3),
#             # nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
#             # nn.BatchNorm2d(out_channels),
#             # nn.ReLU(inplace=True)
#             #nn.MaxPool2d(kernel_size=3),
#             #nn.LocalResponseNorm(size=3),
#             # 3 more conv/relu layers
#             # nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
#             # nn.BatchNorm2d(out_channels),
#             # nn.ReLU(inplace=True),
#             # nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
#             # nn.BatchNorm2d(out_channels),
#             # nn.ReLU(inplace=True),
#             # nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
#             # nn.BatchNorm2d(out_channels),
#             # nn.ReLU(inplace=True),
#             # # 2 more conv/dropout (FCN!)
#             # nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
#             # nn.BatchNorm2d(out_channels),
#             # nn.ReLU(inplace=True),
#             # nn.Dropout(),
#             # nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
#             # nn.BatchNorm2d(out_channels),
#             # nn.ReLU(inplace=True),
#             # nn.Dropout()
#         )

#     def forward(self, x):
#         return self.double_conv(x)

# Basic dilation
class DoubleConv(nn.Module):
    """Double convolution block used in U-Net"""
    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.double_conv = nn.Sequential(
            # 2 sets with LRN
            nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=2, dilation=2),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.LocalResponseNorm(size=3),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=2, dilation=2),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.LocalResponseNorm(size=3),
            # 3 conv + batch norm + relu sets
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=2, dilation=2),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=2, dilation=2),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=2, dilation=2),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            # 2 sets w/ dropout layer
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=2, dilation=2),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.Dropout(),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=2, dilation=2),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.Dropout()
        )

    def forward(self, x):
        return self.double_conv(x)

class UNet(nn.Module):
    def __init__(self, in_channels=3, out_channels=None, features=[64, 128, 256, 512]):
        """
        U-Net implementation
        Args:
            in_channels (int): Number of input channels (default: 3 for RGB)
            out_channels (int): Number of output channels (if None, uses number of CamVid classes)
            features (list): List of feature dimensions for each level
        """
        super().__init__()

        if out_channels is None:
            out_channels = len(CAMVID_CLASSES)

        print("Initial vals")
        print(in_channels)
        print(out_channels)


        # Downs list being used for skip conns only
        self.downs = nn.ModuleList()
        self.ups = nn.ModuleList()
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)

        # # Encoder (downsampling) path
        for feature in features:
            self.downs.append(DoubleConv(in_channels, feature))
            in_channels = feature

        # # Main architecture
        print("FTRS")
        print(features[-1])
        self.ftrs = DoubleConv(features[-1], features[-1]*2)

        # Decoder (upsampling) path
        for feature in reversed(features):
            self.ups.append(
                nn.ConvTranspose2d(feature * 2, feature, kernel_size=2, stride=2)
            )
            self.ups.append(DoubleConv(feature * 2, feature))

        # Final convolution
        self.final_conv = nn.Conv2d(features[0], out_channels, kernel_size=1)

    def forward(self, x):
        skip_connections = []

        # Encoder path
        for down in self.downs:
            x = down(x)
            skip_connections.append(x)
            x = self.pool(x)

        # x = self.bottleneck(x)
        x = self.ftrs(x)
        skip_connections = skip_connections[::-1]  # Reverse for easier access

        # Decoder path
        for idx in range(0, len(self.ups), 2):
            x = self.ups[idx](x)  # Upsample
            skip_connection = skip_connections[idx//2]

            # Handle cases where input dimensions aren't perfectly divisible by 2
            if x.shape != skip_connection.shape:
                x = transforms.functional.resize(x, size=skip_connection.shape[2:])

            concat_skip = torch.cat((skip_connection, x), dim=1)
            x = self.ups[idx+1](concat_skip)  # Double convolution

        return self.final_conv(x)

def test_unet():
    """Test function to verify U-Net implementation"""
    x = torch.randn((1, 3, 256, 256))  # Example input: (batch_size, channels, height, width)
    model = UNet(in_channels=3)  # 3 channels for RGB, output channels automatically set
    preds = model(x)
    print(f"Input shape: {x.shape}")
    print(f"Output shape: {preds.shape}")
    print(f"Number of classes: {len(CAMVID_CLASSES)}")
    assert preds.shape == (1, len(CAMVID_CLASSES), 256, 256), \
       f"Expected output shape (1, {len(CAMVID_CLASSES)}, 256, 256) but got {preds.shape}"
    print("U-Net test passed successfully!")

if __name__ == "__main__":
    test_unet()

